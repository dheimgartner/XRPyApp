library(XRPython)
pythonAddToPath("inst/python", package = "XRPyApp")
source("./tmp.R")
beer <- Beer_Python()
beer$drink()
## Create proxyFunctions and Classes (see also above output to tmp.R)
# start new session
devtools::load_all()
library(XRPython)
ev <- RPython()
pythonAddToPath("inst/python", package = "XRPyApp")
source("./tmp.R")
beer <- Beer_Python(.evaluator = ev)
pythonAddToPath("inst/python", package = "XRPyApp", evaluator = ev)
source("./tmp.R")
beer <- Beer_Python(.evaluator = ev)
beer$drink()
recycle <- XRPython::PythonFunction("recycle", "recycleFunction")
## Create proxyFunctions and Classes (see also above output to tmp.R)
# start new session
devtools::load_all()
library(XRPython)
ev <- RPython()
pythonAddToPath("inst/python", package = "XRPyApp", evaluator = ev)
source("./tmp.R")
beer <- Beer_Python(.evaluator = ev)
beer$drink()
recycle <- XRPython::PythonFunction("recycle", "recycleFunction")
recycle(beer)
beer$drink(28)
beer$drink(28)
pant <- recycle(beer)
pant
pant@.Data
ev$Get(pant)
pant. <- ev$Get(pant)
pant.
pant.$pant
pant. <- ev$Get(pant)
pant.
unclass(pant.)
pant.@fields
pant.@fields$pant
pant.@data
ls(pant.@data)
pant.@data$pant
pant.@fields
pant <- setPythonClass("Pant", "beerClass")
test <- recycle(beer)
class(test)
class(test)
test$pant
test$pant
recycle
recycle@serverDoc
## Create proxyFunctions and Classes (see also above output to tmp.R)
# start new session
devtools::load_all()
library(XRPython)
ev <- RPython()
pythonAddToPath("inst/python", package = "XRPyApp", evaluator = ev)
source("./tmp.R")
beer <- Beer_Python(.evaluator = ev)
beer$drink()
# default conversion
recycle <- XRPython::PythonFunction("recycle", "recycleFunction")
recycle
recycle@serverDoc
recycle@serverArgs
foo()
library(XRPyApp)
foo()
?.onLoad
devtools::load_all()
devtools::load_all()
f_onload()
XRPyApp:::f_onload
?setLoadAction
devtools::load_all()
devtools::load_all()
library(XRPyApp)
devtools::load_all()
devtools::load_all()
hello_load_action()
hello_load_action()
devtools::load_all()
hello_load_action()
devtools::load_all()
hello_load_action()
XRPyApp::hello_load_action()
devtools::load_all()
XRPyApp::hello_load_action()
hello_load_action()
hello_load_action() -> ns
ls(ns)
hello_load_action()
devtools::load_all()
hello_load_action()
XRPyApp:::hello_load_action()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
XRPyApp::hello_load_action
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
?hello_load_action
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
XRPyApp::hello_load_action
XRPyApp::hello_load_action()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
XRPyApp::hello_load_action()
devtools::load_all()
library(XRPython)
ev <- XRPython::RPython()
library(XRPyApp)
ev <- XRPython::RPython()
ev$Import("beerClass")
library(XRPyApp)
XRPyApp::hello_load_action()
?pythonAddToPath
devtools::load_all()
devtools::load_all()
devtools::load_all()
usethis::use_package("XRPython")
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
library(XRPyApp)
library(XRPyApp)
devtools::load_all()
ev <- RPython()
library(XRPyApp)
ev <- RPython()
ev <- XRPython::RPython()
ev$Eval("Beer('A', 33)")
ev$Eval("beerClass.Beer('A', 33)")
library(XRPyApp)
library(XRPyApp)
beer <- Beer()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(XRPyApp)
library(XRPyApp)
library(XRPyApp)
beer <- Beer()
XRPyApp
XRPyApp:::Beer()
devtools::load_all()
roxygen2::roxygenise()
?roxygen2::roxygenise
roxygen2::roxygenise(load_code = pkgload::load_installed())
roxygen2::roxygenise(load_code = load_installed())
roxygen2::roxygenise(load_code = roxygen2::load_installed())
?devtools::load_all
packageVersion("devtools")
install.packages("devtools")
packageVersion("devtools")
devtools::load_all()
?system.file
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
?Python
pythonAddToPath
XRPython::pythonAddToPath
XR::serverAddToPath
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
library(XRPyApp)
?Beer
beer <- Beer()
beer
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
library(XRPyApp)
help(package = "XRPyApp")
beer <- Beer("A", 33)
beer
recycle("Beer")
recycle(beer)
usethis::use_package_doc()
library(XRPyApp)
beer <- Beer("Feldschlössli", 33)
beer$drink(33)
pant <- recycle(beer)
pant
pant
pant$field()
pant$field
pant@.xData
pant@.xData$field()
pant@.xData$field
pant@.xData$pant
pant
unclass(pant)
library(XRPyApp)
help(package = "XRPyApp")
devtools::document()
?devtools::document
devtools::load_all()
devtools::load_all()
devtools::document()
library(XRPyApp)
help("XRPyApp")
example(package = "XRPyApp")
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(XRPyApp)
library(XRPyApp)
help(package = "XRPyApp")
devtools::load_all()
devtools::document()
?`XRPyApp-package`
library(XRPyApp)
help(package = "XRPyApp")
?`XRPyApp-package`
devtools::load_all()
devtools::document()
help(package = "XRPyApp")
?`XRPyApp-package`
library(XRPyApp)
help(package = "XRPyApp")
library(XRPyApp)
help(package = "XRPyApp")
devtools::load_all()
devtools::document()
library(XRPyApp)
help(package = "XRPyApp")
XRPyApp::foo()
XRPyApp::hello_load_action()
XRPyApp::hello_load_action() -> ns
ls(envir = ns)
recycle
beer <- Beer("A", 33)
recycle(beer)
beer$drink(10)
recycle(beer)
beer$drink(24)
beer$drink(23)
recycle(beer)
?beer
?Beer
library(XRPyApp)
beer <- Beer("Feldschlössli", 33)
beer$drink(33)
pant <- recycle(beer)
pant
pant$field()
pant$field
pant$field("pant")
pant$fields
pant$foo()
pant$pant
?hello_load_action
devtools::load_all()
devtools::load_all()
XRPython::PythonInterface$ServerAddToPath
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
Beer <- setPythonClass("Beer", "beerClass")
debugonce(setPythonClass)
debugonce(XR::setPythonClass)
debugonce(XRPython::setPythonClass)
devtools::load_all()
XR::setProxyClass(Class, module, fields, methods, ServerClass = ServerClass,
where = where, contains = contains, evaluatorClass = "PythonInterface",
proxyObjectClass = proxyObjectClass, language = "Python", ..., example = example)
XR::Interface$AddToPath
XR::Interface$show("AddToPath")
XR::Interface$show()
debugonce(XRPython::setPythonClass)
devtools::load_all()
else evaluator <- XR::getInterface(evaluatorClass)
evaluator <- XR::getInterface(evaluatorClass)
Class <- getClass(Class)
?nzchar
XR::Interface$AddToPath
XR::Interface$AddToPath -> test
XR::Interface$methods()
XR::Interface$methods("AddToPath")
XR::Interface$trace("AddToPath")
devtools::load_all()
?trace
XR::Interface$trace("AddToPath", browser)
devtools::load_all()
debugonce(XR::Interface$AddToPath)
debugonce(AddToPath)
class(XR::Interface)
XR::Interface$trace("AddToPath")
devtools::load_all()
XR::Interface$trace("AddToPath", browser)
devtools::load_all()
XR::Interface$trace(AddToPath, tracer = function() browser())
devtools::load_all()
XR::Interface$trace("AddToPath", tracer = function() browser())
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
debugonce(.doLoadActions)
library(XR)
library(XRPython)
??.doLoadActions
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
?setPythonClass
devtools::load_all()
library(XRPyApp)
help(package = "XRPyApp")
beer <- Beer("Feldschlössli", 33)
beer
beer$brand
beer$drink()
beer$drink()
beer$drink()
beer$drink()
beer$drink()
beer$drink()
beer$drink()
beer$drink(3)
pant <- recycle(beer)
pant
pant$pant
ev <- RPython()
library(XRPyApp)
ns <- XRPyApp::hello_load_action()
ns
ls(envir = ns)
library(XRPython)
ev <- Rpython()
ev <- RPython()
ev$Command("beer = Beer('a', 33)")
ev$Command("beer = beerClass.Beer('a', 33)")
ev$Command("print(beer)")
send <- c(1, 2, 3, 4)
ev$Command("print(%s)", send)
class(ev)
typeof(ev)
sloop::otype(ev)
test <- setRefClass("Test")
sloop::otype(test)
debug(ev$Command)
ev$Command("print(%s)", send)
q
ev$Command("print(%s)", send)
undebug(ev$Command)
debugonce(ev$Command)
ev$Command("print(%s)", send)
ev$Command("print(%s)", send)
debugonce(PythonInterface()$Command)
ev$Command("print(%s)", send)
ev$Command("print(%s)", send)
debugonce(PythonInterface)
ev <- RPython()
trace("Command", where = XRPython::PythonInterface)
trace("Command", where = getClass("PythonInterface"))
ev$Command("print(1)")
?trace
trace("Command", where = getClass("PythonInterface"), tracer = browser)
ev$Command("print(1)")
# Define a custom tracer function
custom_tracer <- function() {
cat("Entering Command method\n")
browser()
cat("Exiting Command method\n")
}
# Trace the Command method with the custom tracer function
trace("Command", tracer = custom_tracer, where = getClass("PythonInterface"))
# Now call the Command method
ev$Command("print('hello debug')")
ev$trace("Command", tracer = custom_tracer)
# Now call the Command method
ev$Command("print('hello debug')")
# Define a custom tracer function
custom_tracer <- function() {
cat("Entering Command method\n")
browser()
cat("Exiting Command method\n")
}
# Set up tracing for the Command method in the PythonInterface class
setMethodS3("Command", signature = "PythonInterface", tracer = custom_tracer)
ev$trace("Command", tracer = browser)
# Now call the Command method
ev$Command("print('hello debug')")
# Define a custom tracer function
custom_tracer <- function() {
cat("Entering Command method\n")
browser()
cat("Exiting Command method\n")
}
ev$trace("Command", tracer = custom_tracer)
# Now call the Command method
ev$Command("print('hello debug')")
ev$trace("Command", tracer = browser)
# Now call the Command method
ev$Command("print('hello debug')")
help
where
key
# Now call the Command method
ev$Command("print('hello debug')")
library(XRPython)
ev <- RPython()
ev$trace("Command", tracer = browser)
# Now call the Command method
ev$Command("print('hello debug')")
expr
## On debugging methods
library(XRPython)
ev <- RPython()
debugonce(ev$Command)
ev$Command("print('hello debug')")
## On debugging methods
library(XRPython)
ev <- RPython()
debugonce(ev$Command)
ev$Command("print('hello debug')")
ServerExpression(expr, ...)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
else evaluator <- XR::getInterface(evaluatorClass)
devtools::load_all()
devtools::load_all()
new(Class)
Class
debugonce(new)
devtools::load_all()
?startupActions
??startupActions
library(XR)
??startupActions
library(XRPython)
??startupActions
devtools::load_all()
devtools::load_all()
library(XRPython)
ev <- RPython()
ev <- RPython()
library(XRPython)
ev <- RPython()
ev$AddToPath("python", package = "XRPyApp")
ev$Import("recycleFunction", "recycle")
ev <- RPython()
ev$AddToPath("python", package = "XRPyApp")
pythonAddToPath("python", package = "XRPyApp", evaluator = ev)  # for now inst/python -> in pkg functions you would use without inst (see foo.R but only works if package installed Ctrl + Shift + B)
library(XRPython)
ev <- RPython()
directory <- "python"
system.file(directory, package = "XRPyApp")  # why does this work top level but not in ev$AddToPath()? i.e. it does not work if system.file is called from another package... (this is a known "issue"...)
remove.packages("XRPyApp")
library(XRPython)
ev <- RPython()
directory <- "python"
system.file(directory, package = "XRPyApp")  # why does this work top level but not in ev$AddToPath()? i.e. it does not work if system.file is called from another package... (this is a known "issue"...)
ev$AddToPath("python", package = "XRPyApp")
directory <- "python"
system.file(directory, package = "XRPyApp")  # why does this work top level but not in ev$AddToPath()? i.e. it does not work if system.file is called from another package... (this is a known "issue"...)
ev$AddToPath("python", package = "XRPyApp")
